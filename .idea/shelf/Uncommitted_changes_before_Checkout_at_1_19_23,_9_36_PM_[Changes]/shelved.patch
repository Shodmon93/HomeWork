Index: app/src/main/java/com/example/proskillspizza/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.proskillspizza\n\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.widget.Toast\nimport androidx.recyclerview.widget.GridLayoutManager\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.recyclerview.widget.RecyclerView.LayoutManager\nimport com.example.proskillspizza.recyclerView.CategoryAdapter\nimport com.example.proskillspizza.recyclerView.MenuAdapter\nimport com.example.proskillspizza.recyclerView.StockAdapter\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var myAdapter: CategoryAdapter\n    private lateinit var stockAdapter: StockAdapter\n    private lateinit var categoryRV : RecyclerView\n    private lateinit var menuAdapter : MenuAdapter\n\n\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        initCategoryRV()\n        iniStockRV()\n        initMenuRV()\n\n\n    }\n    fun initCategoryRV(){\n        categoryRV = findViewById(R.id.rv_horizontal)\n\n        myAdapter = CategoryAdapter{index ->\n\n            val newList = CatData.setData(index).map {\n                Category(it.id, it.name, it.isSelected)\n            }\n            myAdapter.submitList(CatData.setData(index))\n\n            Toast.makeText(this, \"$index\", Toast.LENGTH_SHORT).show()\n        }\n        myAdapter.submitList(CatData.setData())\n\n        val layoutManager = LinearLayoutManager(this@MainActivity,LinearLayoutManager.HORIZONTAL,false)\n        categoryRV.layoutManager = layoutManager\n        categoryRV.adapter = myAdapter\n    }\n    fun iniStockRV(){\n        stockAdapter = StockAdapter()\n        stockAdapter.submitList(StockModule.setData())\n        val stockRV = findViewById<RecyclerView>(R.id.stockRV)\n        val layoutManager = GridLayoutManager(this@MainActivity,1,GridLayoutManager.HORIZONTAL,false)\n        stockRV.layoutManager = layoutManager\n        stockRV.adapter = stockAdapter\n\n    }\n    fun initMenuRV(){\n        menuAdapter = MenuAdapter()\n        categoryRV = findViewById(R.id.manuItemList)\n        menuAdapter.submitList(MenuDataModule.setData())\n        categoryRV.layoutManager = LinearLayoutManager(this@MainActivity,LinearLayoutManager.VERTICAL,false)\n        categoryRV.adapter = menuAdapter\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/proskillspizza/MainActivity.kt b/app/src/main/java/com/example/proskillspizza/MainActivity.kt
--- a/app/src/main/java/com/example/proskillspizza/MainActivity.kt	
+++ b/app/src/main/java/com/example/proskillspizza/MainActivity.kt	
@@ -38,6 +38,7 @@
             val newList = CatData.setData(index).map {
                 Category(it.id, it.name, it.isSelected)
             }
+            menuAdapter.submitList(newList)
             myAdapter.submitList(CatData.setData(index))
 
             Toast.makeText(this, "$index", Toast.LENGTH_SHORT).show()
Index: app/src/main/java/com/example/proskillspizza/data/Category.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.proskillspizza\n\ndata class Category(\n    val id: Int? = null,\n    val name: String? = null,\n    var isSelected: Boolean = false\n\n)\n\nobject CatData {\n\n    fun setData(selectedIndex : Int? = null): MutableList<Category> {\n        val items = mutableListOf(\n            Category(0, \"Пицца\"),\n            Category(1, \"Комбо\"),\n            Category(2, \"Закуски\"),\n            Category(3, \"Десерты\"),\n            Category(4, \"Напитки\"),\n            Category(5, \"Соусы\"),\n            Category(6, \"Другие товары\")\n        )\n        items.forEachIndexed { index, category ->\n            if (selectedIndex == index)\n                category.isSelected = true\n\n            return items\n        }\n        return items\n    }\n}\n\n\n    data class MenuData(\n        val id: Int? = null,\n        val name: String? = null,\n        val image: Int? = null,\n        val info: String? = null,\n        val price: String? = null,\n        val category: String? = null\n    )\n\n    object MenuDataModule {\n        fun setData(selectedItem: String? = null): MutableList<MenuData> {\n            val items: MutableList<MenuData> = mutableListOf()\n            items.add(\n                MenuData(\n                    1,\n                    \"Новогодний цыпленок\",\n                    R.drawable.pizza_001,\n                    \"Смесь сыров чеддер и пармезан, соус альфредо, мандарины, цитрусовый соус, новогодний цыпленок, сыр моцарелла\",\n                    \"от 54,00 с\",\n                    \"Пицца\"\n                )\n            )\n            items.add(\n                MenuData(\n                    2,\n                    \"Бургер пицца\",\n                    R.drawable.pizza_002,\n                    \"Красный лук, соленые огурчики, томаты, соус бургер, ветчина халяль, сыр моцарелла\",\n                    \"от 54,00 с\",\n                    \"Комбо\"\n                )\n            )\n            items.add(\n                MenuData(\n                    3,\n                    \"Пицца из половинок\",\n                    R.drawable.pizza_003,\n                    \"Соберите свою пиццу 35 см с двумя разными вкусами\",\n                    \"от 74,00 с\",\n                    \"Закуски\"\n\n                )\n            )\n            items.add(\n                MenuData(\n                    3,\n                    \"Пицца из половинок\",\n                    R.drawable.pizza_004,\n                    \"Соберите свою пиццу 35 см с двумя разными вкусами\",\n                    \"от 74,00 с\",\n                    \"Десерты\"\n\n                )\n            )\n            items.add(\n                MenuData(\n                    3,\n                    \"Пицца из половинок\",\n                    R.drawable.pizza_005,\n                    \"Соберите свою пиццу 35 см с двумя разными вкусами\",\n                    \"от 74,00 с\",\n                    \"Напитки\"\n\n                )\n            )\n            items.forEach { menuData ->\n                if (selectedItem == menuData.category)\n                    return items\n            }\n            return items\n\n        }\n    }\n//\n//    fun setPizzaData(selectedElement: Int? = null): MutableList<Category> {\n//        val items = mutableListOf(\n//            Category(\n//                1, null,\n//                Pizza(\n//                    1,\n//\n//                    \"Новогодний цыпленок\",\n//                    \"от 60,00 с\"\n//                ),\n//                Drink(\n//                    2,\n//\n//\n//                    Combo(\n//                        3,\n//\n//\n//                        ),\n//                    Snacks(\n//                        5,\n//                        R.drawable.pizza_005,\n//                        \"Пепперони\",\n//                        \"Пепперони из цыпленка, томатный соус, увеличенная порция моцареллы\",\n//                        \"от 54,00 с\"\n//                    ), null\n//                ),\n//                Category(\n//                    1, null, Pizza(\n//                        1,\n//                        R.drawable.pizza_001,\n//                        \"Новогодний цыпленок\",\n//                        \"Смесь сыров чеддер и пармезан, соус альфредо, мандарины, цитрусовый соус, новогодний цыпленок, сыр моцарелла\",\n//                        \"от 60,00 с\"\n//                    ),\n//                    Drink(\n//                        2,\n//                        R.drawable.pizza_002,\n//                        \"Бургер пицца\",\n//                        \"Красный лук, соленые огурчики, томаты, соус бургер, ветчина халяль, сыр моцарелла\",\n//                        \"от 54,00 с\"\n//                    ),\n//                    Combo(\n//                        3,\n//                        R.drawable.pizza_003,\n//                        \"Пицца из половинок\",\n//                        \"Соберите свою пиццу 35 см с двумя разными вкусами\",\n//                        \"от 74,00 с\"\n//                    ),\n//                    Snacks(\n//                        5,\n//                        R.drawable.pizza_005,\n//                        \"Пепперони\",\n//                        \"Пепперони из цыпленка, томатный соус, увеличенная порция моцареллы\",\n//                        \"от 54,00 с\"\n//                    ), null\n//                )\n//            )\n//\n//\n//                    items . forEachIndexed { index, category ->\n//                if (index == selectedElement) {\n//                    category.isSelected = true\n//                }\n//            }\n//            return items\n//    }\n//}\n//\n//object PizzaModule {\n//    fun setPizzaData(): MutableList<Pizza> {\n//        val items = mutableListOf(\n//            Pizza(\n//                1,\n//                R.drawable.pizza_001,\n//                \"Новогодний цыпленок\",\n//                \"Смесь сыров чеддер и пармезан, соус альфредо, мандарины, цитрусовый соус, новогодний цыпленок, сыр моцарелла\",\n//                \"от 60,00 с\"\n//            ),\n//            Pizza(\n//                2,\n//                R.drawable.pizza_002,\n//                \"Бургер пицца\",\n//                \"Красный лук, соленые огурчики, томаты, соус бургер, ветчина халяль, сыр моцарелла\",\n//                \"от 54,00 с\"\n//            ),\n//            Pizza(\n//                3,\n//                R.drawable.pizza_003,\n//                \"Пицца из половинок\",\n//                \"Соберите свою пиццу 35 см с двумя разными вкусами\",\n//                \"от 74,00 с\"\n//            ),\n//            Pizza(\n//                4,\n//                R.drawable.pizza_004,\n//                \"Аррива!\",\n//                \"Сыр моцарелла, соус бургер, цыпленок, соус ранч, острая чоризо из цыпленка, сладкий перец, красный лук, томаты, чеснок\",\n//                \"от 54,00 с\"\n//            ),\n//            Pizza(\n//                5,\n//                R.drawable.pizza_005,\n//                \"Пепперони\",\n//                \"Пепперони из цыпленка, томатный соус, увеличенная порция моцареллы\",\n//                \"от 54,00 с\"\n//            ),\n//            Pizza(\n//                6,\n//                R.drawable.pizza_006,\n//                \"Додо\",\n//                \"Ветчина из цыпленка, митболы из говядины, пикантная пепперони из цыпленка, томаты, шампиньоны, сладкий перец, красный лук, чеснок, томатный соус, моцарелла\",\n//                \"от 60,00 с\"\n//            ),\n//            Pizza(\n//                7,\n//                R.drawable.pizza_007,\n//                \"Новогодний цыпленок\",\n//                \"Смесь сыров чеддер и пармезан, соус альфредо, мандарины, цитрусовый соус, новогодний цыпленок, сыр моцарелла\",\n//                \"от 60,00 с\"\n//            ),\n//            Pizza(\n//                8,\n//                R.drawable.pizza_008,\n//                \"Диабло \\uD83C\\uDF36️\\uD83C\\uDF36️\",\n//                \"Острая чоризо из цыпленка, острый перец халапеньо, соус барбекю, митболы из говядины, томаты, сладкий перец, красный лук, томатный соус, моцарелла\",\n//                \"от 58,00 с\"\n//            ),\n//        )\n//        return items\n//    }\n//}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/proskillspizza/data/Category.kt b/app/src/main/java/com/example/proskillspizza/data/Category.kt
--- a/app/src/main/java/com/example/proskillspizza/data/Category.kt	
+++ b/app/src/main/java/com/example/proskillspizza/data/Category.kt	
@@ -8,7 +8,6 @@
 )
 
 object CatData {
-
     fun setData(selectedIndex : Int? = null): MutableList<Category> {
         val items = mutableListOf(
             Category(0, "Пицца"),
@@ -23,7 +22,6 @@
             if (selectedIndex == index)
                 category.isSelected = true
 
-            return items
         }
         return items
     }
